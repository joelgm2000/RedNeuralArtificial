FunctionRequiresNArgumentsFoundN=Function "{0}" requires {1} arguments, found {2}.
FunctionIllegalNumberOfArguments=Function "{0}", illegal number of arguments {1}.
IllegalNodeTypeEncountered=Illegal node type encountered {0}.
configurableparser.ConfigurableParser.EmptyInput=Empty input.
configurableparser.matchers.ArrayAccessGrammarMatcher.ArrayAccess=ArrayAccess unclosed bracket,
configurableparser.matchers.ArrayAccessGrammarMatcher.TerminatorTokenName=<EOF>
configurableparser.matchers.FunctionGrammarMatcher.Function=Function "{0}": unclosed brackets.
configurableparser.matchers.FunctionGrammarMatcher.TerminatorTokenName=<EOF>
#configurableparser.matchers.FunctionGrammarMatcher.InvalidNumberOfArgumentsForFunction={0}: invalid number of arguments {1}.
configurableparser.matchers.ListGrammarMatcher.List=List not closed,
configurableparser.matchers.ListOrBracketGrammarMatcher.ListNotClosed=List not closed:
configurableparser.matchers.RoundBracketGrammarMatcher.BracketsNotClosed=Brackets not closed:
configurableparser.matchers.StringTokenMatcher.AttemptToCallBuildToken=Attempt to call buildToken.
configurableparser.matchers.StringTokenMatcher2.IllegalEscapeSequence=Illegal escape sequence "\\{0}".
configurableparser.matchers.StringTokenMatcher2.MalformedUnicodeEscape=Malformed unicode escape {0}.
configurableparser.matchers.GrammarException.Found=\ found "{0}".
configurableparser.matchers.GrammarException.FoundExpected=\ found "{0}" expected "{1}".
configurableparser.matchers.SingleArgFunctionMatcher.badArgument="{0}": bad argument {1}
configurableparser.ShuntingYard.ImplicitMultiplicationNotEnabled=Implicit multiplication not enabled
configurableparser.ShuntingYard.NextOperatorShouldHaveBeenMatchingTernaryOp=Next operator should have been matching ternary op, found {0}.
configurableparser.ShuntingYard.InvalidOperatorOnStack=Unexpected operator on stack found "{0}".
configurableparser.ShuntingYard.TokensRemainAfterParsing=Tokens ({0}) still remaining after parsing.
configurableparser.ShuntingYard.UnexpectedEndOfInput=Unexpected end of input.
configurableparser.ShuntingYard.TopOfOperatorStackShouldBeASentinel=Top of operator stack should be a sentinel it is {0}.
configurableparser.ShuntingYard.OnlyOneOperatorShouldBeOnStack=Only one node should be of stack after parsing, it has {0}.
configurableparser.ShuntingYard.UnexpectedToken=Unexpected token
configurableparser.Tokenizer.CommentNotClosed=Comment not closed.
configurableparser.Tokenizer.CouldNotMatchText=Could not match text "{0}".
ElementOf.CalcMethodShouldNotBeCalled=calc() method should not be called
# Messages common to several functions
functions.ABoolean=a boolean
functions.AtLestOneArgumentIsRequired={0}: at least one argument is required.
functions.DimensionsOfVectorsDoNotMatch={0}: dimensions of vectors do not match found {1}, {2}.
functions.RunMethodShouldNotHaveBeenCalled={0}: run methods should not have been called.
functions.IncorrectNumberOfArguments={0}: incorrect number of arguments {1}.
functions.IncorrectNumberOfArgumentsExpected={0}: incorrect number of arguments, found {1}, expected {2}.
functions.IndexOutOfRange={0}: index, {1}, out of range.
functions.IndexOutOfRangeMax={0}: condition out of range {1} max {2}.
functions.AssignmentShouldHaveAnLValue={0}: Assignment should have a variable or LValue for the lhs, found {1}.
functions.AttemptToSetValueOfAConstantVariable={0}: Attempt to set the value of a constant variable {1}.
functions.StackError={0}: Stack error
functions.IllegalParameterException.IllegalArgument=: illegal argument:
functions.IllegalParameterException.IllegalArguments=: illegal arguments: 
functions.IllegalParameterException.Comma=, 
functions.IllegalParameterException.Expected=\ expected {0}
functions.IllegalParameterException.ExpectedMsg=\ expected {0}
functions.IllegalParameterException.ActualValueClass=\ {0}[{1}]
functions.IllegalParameterException.UnknownFunction=Unknown function
functions.IllegalParameterException.ArgumentNumber=,\ argument number {0}.
# Messages for specific functions
functions.Binomial.IllegalValuesForArguments={0}: illegal values for arguments, require 0<i<n. They are n={1} and i={2}.
functions.Comparative.NotDefinedForComplexNumbers={0}: not defined for complex numbers.
functions.Cross.BothSidesMustBe2or3Dim={0}: both sides must be either 2 or 3 dimensions, they are {1}.
functions.Dot.EmptyVectors={0}: empty vectors.
functions.If.ConditionMustBeBooleanOrNumber={0}: condition must be Boolean, Number or Complex, found {1}.
functions.Ele.IndexOutOfRange=Ele: index {0} out of range 
functions.Ele.IndexShouldBeAnInteger=Ele: index should be integers, it is {0}.
functions.Ele.LhsMustBeAVectorOfVectors=Ele: variable value must be an instance of a Vector of Vectors
functions.Ele.LhsMustBeAVariable=Ele: lhs must be a variable
functions.Ele.VariableMustBeAVector=Ele: value of variable {0} must be a Vector, found {1}.
functions.Ele.LhsMustBeAVector=Ele: variable value must be a Vector, found {0}.
functions.Ele.MissMatchInDimensions=Ele: Miss match in dimensions array {0} indices {1}.
functions.Ele.OnlySingleDimArraysSupported=Ele: only single dimension array indices supported, found {0}.
functions.Ele.RhsMustBeANumber=Ele: index must be a number, it is {0}.
functions.Factorial.Overflow=Factorial: maximum argument is 20, found {0}.
functions.PostfixMathCommand.ABooleanOrNumber=a boolean or number
functions.PostfixMathCommand.AnInteger=an integer
functions.PostfixMathCommand.Comma=,
functions.PostfixMathCommand.LeftBracket=(
functions.PostfixMathCommand.Quote="
functions.PostfixMathCommand.RightBracket=)
#
FunctionTable.ListEnd=\n
FunctionTable.ListSeparator=\n
FunctionTable.ListStart=Functions:\n
Jep.ResultCouldNotBeConvertedToDoubleType=Result, {0}, could not be converted to the double type.
LineNumberingShuntingYard.NodeFactoryDoesNotSupportLineNumbering=The NodeFactory does not support line numbering
Lookahead2Iterator.next=Lookahead2Iterator next:
Lookahead2Iterator.nextnext=\ nextnext:
#
misc.functions.LogTwoArg.SecondArgumentMustBePositive={0}: the second argument, {1}, must be positive.
misc.functions.Case.NoArgumentsMatch={0}: no arguments match {1}.
misc.functions.FromBase.StringMustStartWithPrefix={0}: string "{1}" must start with prefix "{2}".
misc.functions.ToBase.BaseMustBeBetween={0}: base {1} must be between {2} and {3}.
misc.javaops.AbstractInc.ArgumentShouldBeAVariable=increment/decrement: argument should be a variable it is {0}.
misc.javaops.AbstractInc.VariableValueShouldBeANumber=increment/decrement: variable value for {0} should be a Number, it is {1},
misc.lineNumbering.LineNumberingShuntingYard.UnexpectedEndOfInput=Unexpected end of input.
misc.MacroFunction.InitMethodMustBeCalledBeforeEvaluation={0}: init(Jep) method must be used before evaluation.
misc.NullParser.NullParserCannotParserExpressions=NULL Parser: this parser cannot parser expressions.
misc.VariableTableObserver.NewVariableAdded=New variable {0} added, value {1}.
misc.VariableTableObserver.VariableRemoved=Variable {0} removed.
misc.VariableTableObserver.VariableTableCleared.=Variable table cleared.
misc.VariableTableObserver.VariableValueChanged=Variable {0} value changed new value {1}.
#
NodeFactory.VariableUndefined=Variable "{0}" undefined. Use jep.setAllowUndeclared() to allow undeclared variables.
#Operator.AlternateSymbols=alternate symbols
Operator.Associative=associative
Operator.Binary=binary
Operator.Colon=:
Operator.Comma=,
Operator.FullStop=.
Operator.Commuative=commutative
Operator.EquivalenceRelation=equivalence relation
Operator.Infix=infix
Operator.LeftBinding=left binding
Operator.NoArguments=no arguments
Operator.Operator=Operator
Operator.Precedence=precedence
Operator.Prefix=prefix
Operator.Quote="
Operator.Reflexive=reflexive
Operator.RightBinding=right binding
Operator.Space=\ 
Operator.Suffix=suffix
Operator.Symmetric=symmetric
Operator.Ternary=ternary
Operator.Transitive=transitive
Operator.Unary=unary
Operator.VariableNumberOfArguments=variable number of arguments
#Messages used by parse tree nodes.
parser.SimpleNode.Space=\ 
parser.ASTConstant.Constant=Constant: 
parser.ASTFunNode.Function=Function: "{0}"
parser.ASTOpNode.Operator=Operator: "{0}"
parser.ASTVarNode.Variable=Variable: "{0}"
#
parser.JccParser.NoExpressionEntered=Syntax Error: No expression entered.
parser.JccParser.AssignmentNotEnabled=Syntax Error: assignment not enabled.
parser.JccParser.UnrecognizedSymbol=Unrecognized variable "{0}".
parser.JccParser.UnrecognizedFunction=Unrecognized function "{0}".
parser.JccParser.ImplicitMultiplicationNotEnabled=Syntax Error: implicit multiplication not enabled.
parser.JccParser.FunctionIllegalNumberOfArguments=Function "{0}" illegal number of arguments {1}.
parser.JccParser.FunctionRequiresNArguments=Function "{0}" requires {1} arguments.
parser.JccParser.CantParseNumber=Cannot parse number "{0}".
# The following lines are joined to give a single message.
parser.ParseException.Encountered=Encountered
parser.ParseException.AtLineColumn=at line {0}, column {1}.
parser.ParseException.WasExpecting=Was expecting:
parser.ParseException.WasExpectingOneOf=Was expecting one of:
#
parser.JepJavaCharStream.InvalidUnicodeEscapeAtLineColumn=Invalid unicode escape "{0}" at line {1}, column {2}.
parser.TokenMgrError.LexicalErrorAtLineColumn=Lexical error at line {0}, column {1}.  Encountered: "{2}" ({3}) after : "{4}".
parser.TokenMgrError.LexicalErrorAtLineColumnEncounteredEOF=Lexical error at line {0}, column {1}.  Encountered: <EOF> after : "{2}".
#
ParseException.LineColumnMessage=Line {0} column {1}: {2}
PrintVisitor.NullOperatorWhenPrinting_node=Null operator in print. 
real.RealEvaluator.CannotConvertToDouble=Cannot convert {0}({1}) to a double
real.RealEvaluator.NullValue=Null value encountered
real.RealEvaluator.NullVariableValue=Variable {0} has a null value
real.RealEvaluator.PostfixMathCommandNotFound=PostfixMathCommand for {0} not found
standard.Complex.ToStringBracketsWithI=({0}+{1} i)
standard.Complex.ToStringFormat=({0}, {1})
standard.Complex.ToStringImaginaryWithI={0} i
standard.Complex.ToStringNoBracketsWithI={0}+{1} i
standard.Complex.ToStringWithNumberFormat=({0}, {1})
standard.DoubleNumberFactory.CannotCreateANumberFromAComplexValue=Cannot create a number from a Complex value
standard.EmptyOperatorTable.ListEnd=\n
standard.EmptyOperatorTable.ListSeparator=\n
standard.EmptyOperatorTable.ListStart=Operators:\n
standard.FastEvaluator.CouldNotEvaluateVariableNoValueSet=Could not evaluate variable {0} no value set.
standard.FastEvaluator.CouldNotEvaluateVariableNullValue=Could not evaluate variable {0} no value set. See com.singularsys.jep.standard.FastEvaluator.setTrapNullValues(boolean).
standard.FastEvaluator.IncorrectNumberOfArgumentsExpected={0}: incorrect number of arguments {1} expecting {2}.
standard.FastEvaluator.IncorrectNumberOfArgumentsNonZero={0}: incorrect number of arguments {1} must be >0.
standard.FastEvaluator.IncorrectNumberOfArguments={0}: incorrect number of arguments {1}.
standard.FastEvaluator.InfiniteConstantValue=Infinite constant value, {0}, detected.
standard.FastEvaluator.InfiniteValueForFunction={0}: infinite value, {1}, detected for result of function/operator.
standard.FastEvaluator.InfiniteValueForVariable=Infinite value, {0}, detected for variable {1}. See com.singularsys.jep.standard.FastEvaluator.setTrapInfinity(boolean).
standard.FastEvaluator.NaNConstantValue=NaN constant value detected.
standard.FastEvaluator.NaNValueForFunction={0}: NaN value detected for result of function/operator.
standard.FastEvaluator.NaNValueForVariable=NaN value detected for variable {0}. See com.singularsys.jep.standard.FastEvaluator.setTrapNaN(boolean).
standard.FastEvaluator.NoFunctionClass={0}: no associated function class.
standard.FastEvaluator.NullConstantValue=null constant value detected.
standard.FastEvaluator.NullValueForFunction={0}: null value detected for result of function/operator.
standard.FastEvaluator.StackCorrupted=Stack corrupted
standard.StandardEvaluator.CouldNotEvaluateVariableNullValue=Could not evaluate variable {0} no value set. See com.singularsys.jep.standard.StandardEvaluator.setTrapNullValues(boolean).
standard.StandardEvaluator.IncorrectNumberOfArgumentsExpected={0}: incorrect number of arguments {1} expecting {2}.
#standard.StandardEvaluator.IncorrectNumberOfArgumentsNonZero={0}: incorrect number of arguments {1} must be >0.
standard.StandardEvaluator.IncorrectNumberOfArguments={0}: incorrect number of arguments {1}.
standard.StandardEvaluator.InfiniteConstantValue=Infinite constant value {0} detected.
standard.StandardEvaluator.InfiniteValueForFunction={0}: infinite value, {1}, detected for result of function/operator.
standard.StandardEvaluator.InfiniteValueForVariable=Infinite value, {0}, detected for variable {1}. See com.singularsys.jep.standard.StandardEvaluator.setTrapInfinity(boolean).
standard.StandardEvaluator.NaNConstantValue=NaN constant value detected.
standard.StandardEvaluator.NaNValueForFunction={0}: NaN value detected for result of function/operator.
standard.StandardEvaluator.NaNValueForVariable=NaN value detected for variable {0}. See com.singularsys.jep.standard.StandardEvaluator.setTrapNaN(boolean).
standard.StandardEvaluator.NoFunctionClass=No function class associated with {0}.
standard.StandardEvaluator.NullFunctionValue={0}: null value detected for result of function/operator.
standard.StandardEvaluator.NullConstantValue=null constant value detected.
standard.StandardEvaluator.StackCorrupted=Stack corrupted
Variable.ToStringNullValue={0}: null value
Variable.ToStringConstant={0}: {1} (constant)
Variable.ToString={0}: {1}
#Variable.ConstantValue=\ (Constant)
#Variable.NullValue=null
#Variable.Seperator=: 
VariableTable.AttemptToSetTheValueOfAConstantVariable=Attempt to set the value of a constant variable: {0}.
VariableTable.ListEnd=
VariableTable.ListSeparator=\n
VariableTable.ListStart=Variables:\n
walkers.PostfixTreeWalker.ExpectedSentinalOnStack=Expected sentinel on stack
walkers.SerializableExpression.Constant=Constant: {0}.
walkers.SerializableExpression.Function=Function: {0} ({1}).
walkers.SerializableExpression.Operator=Operator: {0} ({1}).
walkers.SerializableExpression.StackCorruptedSizeN=Stack corrupted size {0}.
walkers.SerializableExpression.Variable=Variable: {0}.
walkers.SubstitutionVisitor.SubstitutionEquationShouldBeOfTheForm=substitute: substitution equation should be of the form x=....
walkers.TreeAnalyzer.Comma=, 
walkers.TreeAnalyzer.Constants=\nConstants: {0} - 
walkers.TreeAnalyzer.Functions=\nFunctions: {0} - 
walkers.TreeAnalyzer.NameNumber={0} ({1})
walkers.TreeAnalyzer.NodesDepth=Nodes: {0}, depth: {1}.\n
walkers.TreeAnalyzer.Operators=\nOperators: {0} - 
walkers.TreeAnalyzer.SummaryString=Nodes: {0}, Depth: {1}, Variables: {2} ({3}), Functions: {4} ({5}), Operators: {6} ({7}), Constants: {8} ({9}).
walkers.TreeAnalyzer.Variables=Variables: {0} - 
